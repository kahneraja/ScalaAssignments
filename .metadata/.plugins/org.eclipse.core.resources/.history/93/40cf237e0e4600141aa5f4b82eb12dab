object Research {
  def factorial(x: Int): Int =
    if (x == 0) 1 else x * factorial(x - 1)

  def fTailProduct(x: Int, next: Int): Int =
    x * fTail(next)

  def fTail(x: Int): Int =
    if (x == 0) 1 else fTailProduct(x, x - 1)

  factorial(5)
  factorial(1)
  factorial(2)
  factorial(3)

  def filter(chars: List[Char]): List[Char] = chars.filter { e => e == '(' || e == ')' }

  def balance(chars: List[Char]): Boolean = {
    def counter(chars: List[Char], openCount: Int): Int =
      if (chars.isEmpty || openCount < 0)
        openCount
      else if (chars.head == '(')
        counter(chars.tail, openCount + 1)
      else if (chars.head == ')')
        counter(chars.tail, openCount - 1)
      else
        counter(chars.tail, openCount)

    if (counter(chars, 0) == 0) true else false
  }

  balance("a(b)c d".toList)
  balance("a(bcd".toList)
  balance(")(".toList)
  balance("())(".toList)
  balance(")".toList)
  balance("()".toList)
  balance("(....(((((...))))))".toList)
  balance("(())".toList)

  def addNextDomination(denomination: Int, denominations: List[Int], allDenominations: List[Int], total: Int, target: Int, combinations: Int): Int =
    if (denominations.isEmpty)
    	combinations
    else
      addDenomination(denominations.head, allDenominations, total, target, combinations)
      + addNextDomination(denominations.head, denominations.tail, allDenominations, total, target, combinations)

  def addAllDenominations(allDenominations: List[Int], total: Int, target: Int, combinations: Int): Int =
      addNextDomination(allDenominations.head, allDenominations.tail, allDenominations, total, target, combinations)

  def addDenomination(denomination: Int, allDenominations: List[Int], total: Int, target: Int, combinations: Int): Int =
    if (total + denomination == target)
      // match!
      combinations + 1
    else if (total + denomination > target)
      combinations
    else
      // try adding every denomination
      addAllDenominations(allDenominations, total, target, combinations)

  def countChange(money: Int, coins: List[Int]): Int =
    addDenomination(coins.head, coins, 0, money, 0)

  countChange(1, List(1))
  countChange(2, List(1))
  
  
  
}