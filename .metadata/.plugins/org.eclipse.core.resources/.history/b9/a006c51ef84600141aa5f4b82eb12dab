object Research {
  def factorial(x: Int): Int =
    if (x == 0) 1 else x * factorial(x - 1)       //> factorial: (x: Int)Int

  def fTailProduct(x: Int, next: Int): Int =
    x * fTail(next)                               //> fTailProduct: (x: Int, next: Int)Int

  def fTail(x: Int): Int =
    if (x == 0) 1 else fTailProduct(x, x - 1)     //> fTail: (x: Int)Int

  factorial(5)                                    //> res0: Int = 120
  factorial(1)                                    //> res1: Int = 1
  factorial(2)                                    //> res2: Int = 2
  factorial(3)                                    //> res3: Int = 6

  def filter(chars: List[Char]): List[Char] = chars.filter { e => e == '(' || e == ')' }
                                                  //> filter: (chars: List[Char])List[Char]

  def balance(chars: List[Char]): Boolean = {
    def counter(chars: List[Char], openCount: Int): Int =
      if (chars.isEmpty || openCount < 0)
        openCount
      else if (chars.head == '(')
        counter(chars.tail, openCount + 1)
      else if (chars.head == ')')
        counter(chars.tail, openCount - 1)
      else
        counter(chars.tail, openCount)

    if (counter(chars, 0) == 0) true else false
  }                                               //> balance: (chars: List[Char])Boolean

  balance("a(b)c d".toList)                       //> res4: Boolean = true
  balance("a(bcd".toList)                         //> res5: Boolean = false
  balance(")(".toList)                            //> res6: Boolean = false
  balance("())(".toList)                          //> res7: Boolean = false
  balance(")".toList)                             //> res8: Boolean = false
  balance("()".toList)                            //> res9: Boolean = true
  balance("(....(((((...))))))".toList)           //> res10: Boolean = true
  balance("(())".toList)                          //> res11: Boolean = true

	def addAllCoins(coin: Int, coins: List[Int], allCoins: List[Int], money: Int, balance: Int, combinations: Int): Int =
		if (coin + balance == money)
			addAllCoins(coins.head, coins.tail, allCoins, money, 0, combinations + 1)
		else if (coin + balance < money && !coins.isEmpty)
			addAllCoins(coin, coins, allCoins, money, balance + coin, combinations) + addAllCoins(coin, coins.tail, allCoins, money, balance + coin, combinations)
		else if (coin + balance < money && !allCoins.isEmpty)
			addAllCoins(coin, coins, allCoins, money, balance + coin, combinations) + addAllCoins(coin, coins, allCoins.tail, money, balance + coin, combinations)
		else if (coin + balance < money)
			addAllCoins(coin, coins, allCoins, money, balance + coin, combinations)
		else // coin + balance > money
		  addAllCoins(coins.head, coins.tail, allCoins, money, 0, combinations)
                                                  //> addAllCoins: (coin: Int, coins: List[Int], allCoins: List[Int], money: Int,
                                                  //|  balance: Int, combinations: Int)Int

  def countChange(money: Int, coins: List[Int]): Int =
		addAllCoins(coins.head, coins.tail, coins, money, 0, 0)
                                                  //> countChange: (money: Int, coins: List[Int])Int
  
  countChange(1, List(1))                         //> java.util.NoSuchElementException: head of empty list
                                                  //| 	at scala.collection.immutable.Nil$.head(List.scala:420)
                                                  //| 	at scala.collection.immutable.Nil$.head(List.scala:417)
                                                  //| 	at Research$$anonfun$main$1.addAllCoins$1(Research.scala:43)
                                                  //| 	at Research$$anonfun$main$1.countChange$1(Research.scala:54)
                                                  //| 	at Research$$anonfun$main$1.apply$mcV$sp(Research.scala:56)
                                                  //| 	at org.scalaide.worksheet.runtime.library.WorksheetSupport$$anonfun$$exe
                                                  //| cute$1.apply$mcV$sp(WorksheetSupport.scala:76)
                                                  //| 	at org.scalaide.worksheet.runtime.library.WorksheetSupport$.redirected(W
                                                  //| orksheetSupport.scala:65)
                                                  //| 	at org.scalaide.worksheet.runtime.library.WorksheetSupport$.$execute(Wor
                                                  //| ksheetSupport.scala:75)
                                                  //| 	at Research$.main(Research.scala:1)
                                                  //| 	at Research.main(Research.scala)
  countChange(2, List(1))
  countChange(4, List(1,2,4))
  countChange(4, List(5,2,4))
  
  
}