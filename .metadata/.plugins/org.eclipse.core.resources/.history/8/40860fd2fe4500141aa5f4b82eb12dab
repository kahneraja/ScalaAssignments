object Research {
  def factorial(x: Int): Int =
    if (x == 0) 1 else x * factorial(x - 1)       //> factorial: (x: Int)Int

  def fTailProduct(x: Int, next: Int): Int =
    x * fTail(next)                               //> fTailProduct: (x: Int, next: Int)Int

  def fTail(x: Int): Int =
    if (x == 0) 1 else fTailProduct(x, x - 1)     //> fTail: (x: Int)Int

  factorial(5)                                    //> res0: Int = 120
  factorial(1)                                    //> res1: Int = 1
  factorial(2)                                    //> res2: Int = 2
  factorial(3)                                    //> res3: Int = 6

  def filter(chars: List[Char]): List[Char] = chars.filter { e => e == '(' || e == ')' }
                                                  //> filter: (chars: List[Char])List[Char]

  def balance(chars: List[Char]): Boolean = {
    def counter(chars: List[Char], openCount: Int): Int =
      if (chars.isEmpty || openCount < 0)
        openCount
      else if (chars.head == '(')
        counter(chars.tail, openCount + 1)
      else if (chars.head == ')')
        counter(chars.tail, openCount - 1)
      else
        counter(chars.tail, openCount)

    if (counter(chars, 0) == 0) true else false
  }                                               //> balance: (chars: List[Char])Boolean

  balance("a(b)c d".toList)                       //> res4: Boolean = true
  balance("a(bcd".toList)
  balance(")(".toList)
  balance("())(".toList)
  balance(")".toList)
  balance("()".toList)
  balance("(....(((((...))))))".toList)
  balance("(())".toList)


	def 

	def accumulateChildren(accumulatedMoney: Int, denomination: Int, denominations: List[Int], money: Int, combinations: Int): Int =
		if (accumulatedMoney + denomination == money)
			combinations + 1
		else
			accumulateChildren(accumulatedMoney + denomination, denomination, denominations, money, combinations)
			
	
  def countChange(money: Int, coins: List[Int]): Int =
  		accumulateChildren(0, coins.head, coins.tail, money, 0)

	10 % 6
	6 % 10

  countChange(1, List(1))
  countChange(2, List(1))
  countChange(2, List(1,2))
	countChange(5, List(1,2))
	countChange(4,List(1,2))
	countChange(300,List(500,5,50,100,20,200,10))
	
}