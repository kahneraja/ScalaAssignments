object Research {
  def factorial(x: Int): Int =
    if (x == 0) 1 else x * factorial(x - 1)       //> factorial: (x: Int)Int

  def fTailProduct(x: Int, next: Int): Int =
    x * fTail(next)                               //> fTailProduct: (x: Int, next: Int)Int

  def fTail(x: Int): Int =
    if (x == 0) 1 else fTailProduct(x, x - 1)     //> fTail: (x: Int)Int

  factorial(5)                                    //> res0: Int = 120
  factorial(1)                                    //> res1: Int = 1
  factorial(2)                                    //> res2: Int = 2
  factorial(3)                                    //> res3: Int = 6

  def filter(chars: List[Char]): List[Char] = chars.filter { e => e == '(' || e == ')' }
                                                  //> filter: (chars: List[Char])List[Char]

  def balance(chars: List[Char]): Boolean = {
    def counter(chars: List[Char], openCount: Int): Int =
      if (chars.isEmpty || openCount < 0)
        openCount
      else if (chars.head == '(')
        counter(chars.tail, openCount + 1)
      else if (chars.head == ')')
        counter(chars.tail, openCount - 1)
      else
        counter(chars.tail, openCount)

    if (counter(chars, 0) == 0) true else false
  }                                               //> balance: (chars: List[Char])Boolean

  balance("a(b)c d".toList)                       //> res4: Boolean = true
  balance("a(bcd".toList)                         //> res5: Boolean = false
  balance(")(".toList)                            //> res6: Boolean = false
  balance("())(".toList)                          //> res7: Boolean = false
  balance(")".toList)                             //> res8: Boolean = false
  balance("()".toList)                            //> res9: Boolean = true
  balance("(....(((((...))))))".toList)           //> res10: Boolean = true
  balance("(())".toList)                          //> res11: Boolean = true

  def accumulateChildren(accumulatedMoney: Int, denomination: Int, denominations: List[Int], money: Int, combinations: Int): Int =
    if (accumulatedMoney + denomination == money)
      combinations + 1
    else
      accumulateChildren(accumulatedMoney + denomination, denomination, denominations, money, combinations)
                                                  //> accumulateChildren: (accumulatedMoney: Int, denomination: Int, denomination
                                                  //| s: List[Int], money: Int, combinations: Int)Int


  def countChange(money: Int, coins: List[Int]): Int =
    accumulateChildren(0, coins.head, coins.tail, money, 0)
                                                  //> countChange: (money: Int, coins: List[Int])Int

  10 % 6                                          //> res12: Int(4) = 4
  6 % 10                                          //> res13: Int(6) = 6

  countChange(1, List(1))                         //> res14: Int = 1
  countChange(2, List(1))                         //> res15: Int = 1
  countChange(2, List(1, 2))                      //> res16: Int = 1
  countChange(5, List(1, 2))                      //> res17: Int = 1
  countChange(4, List(1, 2))                      //> res18: Int = 1
  countChange(300, List(500, 5, 50, 100, 20, 200, 10))
                                                  //> res19: Int = 1

  def cycleDemoninations(demonination: Int, demoninations: List[Int], total: Int, money: Int): Int =
    if (demonination <= money && demoninations.isEmpty)
    	total + 1
    else if (demonination <= money)
      cycleDemoninations(demoninations.head, demoninations.tail, total + 1, money)
    else
      total                                       //> cycleDemoninations: (demonination: Int, demoninations: List[Int], total: In
                                                  //| t, money: Int)Int

  def suitableDenominations(money: Int, coins: List[Int]): Int =
    cycleDemoninations(coins.head, coins.tail, 0, money)
                                                  //> suitableDenominations: (money: Int, coins: List[Int])Int
  suitableDenominations(4, List(1, 2))            //> java.util.NoSuchElementException: head of empty list
                                                  //| 	at scala.collection.immutable.Nil$.head(List.scala:420)
                                                  //| 	at scala.collection.immutable.Nil$.head(List.scala:417)
                                                  //| 	at Research$$anonfun$main$1.cycleDemoninations$1(Research.scala:63)
                                                  //| 	at Research$$anonfun$main$1.suitableDenominations$1(Research.scala:68)
                                                  //| 	at Research$$anonfun$main$1.apply$mcV$sp(Research.scala:69)
                                                  //| 	at org.scalaide.worksheet.runtime.library.WorksheetSupport$$anonfun$$exe
                                                  //| cute$1.apply$mcV$sp(WorksheetSupport.scala:76)
                                                  //| 	at org.scalaide.worksheet.runtime.library.WorksheetSupport$.redirected(W
                                                  //| orksheetSupport.scala:65)
                                                  //| 	at org.scalaide.worksheet.runtime.library.WorksheetSupport$.$execute(Wor
                                                  //| ksheetSupport.scala:75)
                                                  //| 	at Research$.main(Research.scala:1)
                                                  //| 	at Research.main(Research.scala)

}