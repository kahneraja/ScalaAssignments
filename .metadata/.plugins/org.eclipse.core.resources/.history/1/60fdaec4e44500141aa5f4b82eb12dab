object Research {
  def factorial(x: Int): Int =
    if (x == 0) 1 else x * factorial(x - 1)       //> factorial: (x: Int)Int
  
  def fTailProduct(x: Int, next: Int): Int =
  	x * fTail(next)                           //> fTailProduct: (x: Int, next: Int)Int
  
  def fTail(x: Int): Int =
    if (x == 0) 1 else fTailProduct(x, x - 1)     //> fTail: (x: Int)Int

  factorial(5)                                    //> res0: Int = 120
  factorial(1)                                    //> res1: Int = 1
  factorial(2)                                    //> res2: Int = 2
  factorial(3)                                    //> res3: Int = 6
  
  def filter(chars: List[Char]): List[Char] = chars.filter{ e => e == '(' || e == ')'}
                                                  //> filter: (chars: List[Char])List[Char]
  
  def balance(chars: List[Char]): Boolean =
  	(filter(chars).length == 2)               //> balance: (chars: List[Char])Boolean
  
  val s1 = List('a', '(', 'b', ')', 'c')          //> s1  : List[Char] = List(a, (, b, ), c)
  balance(s1)                                     //> res4: Boolean = true
  
  val s2 = List('a', '(', 'c')                    //> s2  : List[Char] = List(a, (, c)
  balance(s2)                                     //> res5: Boolean = false
}