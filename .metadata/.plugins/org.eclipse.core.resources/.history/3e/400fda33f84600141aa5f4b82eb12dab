object Research {
  def factorial(x: Int): Int =
    if (x == 0) 1 else x * factorial(x - 1)

  def fTailProduct(x: Int, next: Int): Int =
    x * fTail(next)

  def fTail(x: Int): Int =
    if (x == 0) 1 else fTailProduct(x, x - 1)

  factorial(5)
  factorial(1)
  factorial(2)
  factorial(3)

  def filter(chars: List[Char]): List[Char] = chars.filter { e => e == '(' || e == ')' }

  def balance(chars: List[Char]): Boolean = {
    def counter(chars: List[Char], openCount: Int): Int =
      if (chars.isEmpty || openCount < 0)
        openCount
      else if (chars.head == '(')
        counter(chars.tail, openCount + 1)
      else if (chars.head == ')')
        counter(chars.tail, openCount - 1)
      else
        counter(chars.tail, openCount)

    if (counter(chars, 0) == 0) true else false
  }

  balance("a(b)c d".toList)
  balance("a(bcd".toList)
  balance(")(".toList)
  balance("())(".toList)
  balance(")".toList)
  balance("()".toList)
  balance("(....(((((...))))))".toList)
  balance("(())".toList)

	def addAllCoins(coin: Int, coins: List[Int], allCoins: List[Int], money: Int, balance: Int, combinations: Int): Int =
		if (coins + balance == money && coins.isEmpty)
			1
		else if (coin + balance == money && !coins.isEmpty)
			addAllCoins(coins.head, coins.tail, allCoins, money, 0, combinations + 1)
		else if (coin + balance < money && !coins.isEmpty)
			addAllCoins(coin, coins, allCoins, money, balance + coin, combinations) + addAllCoins(coin, coins.tail, allCoins, money, balance + coin, combinations)
		else if (coin + balance < money && !allCoins.isEmpty)
			addAllCoins(coin, coins, allCoins, money, balance + coin, combinations) + addAllCoins(coin, coins, allCoins.tail, money, balance + coin, combinations)
		else if (coin + balance < money)
			addAllCoins(coin, coins, allCoins, money, balance + coin, combinations)
		else // coin + balance > money
		  addAllCoins(coins.head, coins.tail, allCoins, money, 0, combinations)

  def countChange(money: Int, coins: List[Int]): Int =
		addAllCoins(coins.head, coins.tail, coins, money, 0, 0)
  
  countChange(1, List(1))
  countChange(2, List(1))
  countChange(4, List(1,2,4))
  countChange(4, List(5,2,4))
  
  
}